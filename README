Kata: app from scratch
======================

 - come funziona TDD quando è applicato sul lavoro?
 - questa demo è un riassunto di quello che succede in uno sviluppo professionale in TDD

 - questo è l'elenco delle cose che dovremmo riuscire a vedere:
   - come si scrivono i test quando c'è di mezzo il tempo che passa
   - refactor per rendere il codice estensibile (OCP)
   - la scrittura del walking skeleton
   - lo sviluppo di test bottom-up e lo sviluppo outside-in
   - il pattern "enlarge test boundaries"
   - il pattern "test as a REPL"
   - il pattern "fake it 'til you make it"

 - rispetto ad altri talk che potete aver visto su TDD
   - è uno sviluppo da zero (si parte da git init, tutto il codice verrà sviluppato live)
   - non è la risoluzione di un semplice kata -> è lo sviluppo di una applicazione
   - è tutto sviluppato in TDD -> così potete farvi un'idea di come funziona sul lavoro

 - questa demo è il frutto di circa 50 ore di esercizio
   - sono quasi due mesi che ogni giorno (feriale) dedico almeno un'ora a migliorare l'esercizio 

 - tecnologie che usiamo
   - Ruby come linguaggio
   - RSpec come framework di test/spec
   - Vim come editor

 - l'applicazione da svilupare
   - l'applicazione è una applicazione da linea di comando 
   - il meccanismo di persistenza è il file (no DB)
   - usa il tempo (nel senso che è un timer)

 - l'esercizio
   - lo scopo è sviluppare un timer per la tecnica del pomodoro
   - l'eseguibile si chiama `dingy`
   - ha due feature: 
      1) avvio di una timebox (da 25min)
      2) mostrare quanto tempo manca alla fine della TimeBox

Esempio di utilizzo

   # start a timebox
   $ bin/dingy --start    

   # see the remaining time 
   $ bin/dingy
   24:59
   
   # after a while
   $ bin/dingy
   00:00

Steps iniziali
--------------

 - il sistema di testing funziona?
 - come lancio un eseguibile?
 - come passo una variabile di ambiente?
 - come passo le info passando da file?
 - come formattare MM:SS?* 

eof
